name: Build - Windows

on: 
  workflow_call:
    inputs:
      version:
        description: 'Version'
        default: ''
        required: false
        type: string
      build_type:
        description: 'Build Type'
        default: "Debug"
        required: false
        type: string

env:
  QT_VERSION: 6.3.1
  EXTRA_CMAKE_FLAGS: ""

jobs:
  build-desktop-application-windows:
    name: Build Desktop Application Windows
    runs-on: windows-latest

    steps:
      # Increase page size so that the compiler doesn't
      # run out of memory
      - name: Configure Pagefile
        uses: al-cheb/configure-pagefile-action@v1.3
        with:
          minimum-size: 16GB
          maximum-size: 16GB
          disk-root: "C:"

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v3.2.1
        with:
          version: ${{ env.QT_VERSION }}
          host: 'windows'
          target: 'desktop'
          arch: 'win64_mingw'
          cache: true
          cache-key-prefix: install-qt-${{ env.QT_VERSION }}-action

      - name: Install GCC 11.2.0
        uses: egor-tensin/setup-mingw@v2.2.0
        with:
          version: 11.2.0

      - name: Set Debug Flags
        if: inputs.build_type == 'Debug'
        run: echo "EXTRA_CMAKE_FLAGS=${{ env.EXTRA_CMAKE_FLAGS }} -DENABLE_DEBUG=True" >> $GITHUB_ENV

      - name: Set Release Flags
        if: inputs.build_type == 'Release' && inputs.version != ''
        run: echo "EXTRA_CMAKE_FLAGS=${{ env.EXTRA_CMAKE_FLAGS }} -DRELEASE_TAG=${{ inputs.version }}" >> $GITHUB_ENV

      - name: Configure CMake
        working-directory: ${{ github.workspace }}
        run: cmake gui -G "MinGW Makefiles" -B build -DGITHUB_WORKFLOW=True -DEMBED_DATA=True ${{ env.EXTRA_CMAKE_FLAGS }} -DCMAKE_C_COMPILER="C:\ProgramData\chocolatey\lib\mingw\tools\install\gcc.exe" -DCMAKE_CXX_COMPILER="C:\ProgramData\chocolatey\lib\mingw\tools\install\g++.exe"
        
      - name: Build
        working-directory: ${{ github.workspace }}
        run: cmake --build build --config ${{ inputs.build_type }} -j

      - name: Get Version
        id: get-version
        working-directory: ${{ github.workspace }}
        run: |
          echo "RANDO_VERSION=$(((Get-Content version.hpp | Select-String -Pattern '#define RANDOMIZER_VERSION "[0-9\.\-a-z]*"') -Replace '.*("[0-9\.\-a-z]*").*', '$1') -Replace '"', '')" >> $env:GITHUB_OUTPUT
        
      - name: Call windeployqt
        working-directory: ${{ github.workspace }}/build
        shell: cmd # Setting up environment vars only works properly in cmd?
        run: |
          mkdir wwhd_rando_windows
          cp wwhd_rando.exe wwhd_rando_windows\wwhd_rando.exe
          cp ${{ github.workspace }}\..\Qt\${{ env.QT_VERSION }}\mingw_64\bin\libgcc_s_seh-1.dll wwhd_rando_windows\libgcc_s_seh-1.dll
          cp ${{ github.workspace }}\..\Qt\${{ env.QT_VERSION }}\mingw_64\bin\libstdc++-6.dll wwhd_rando_windows\libstdc++-6.dll
          cp ${{ github.workspace }}\..\Qt\${{ env.QT_VERSION }}\mingw_64\bin\libwinpthread-1.dll wwhd_rando_windows\libwinpthread-1.dll
          ${{ github.workspace }}\..\Qt\${{ env.QT_VERSION }}\mingw_64\bin\qtenv2.bat && cd ${{ github.workspace }}\build\wwhd_rando_windows && windeployqt wwhd_rando.exe --no-translations --no-system-d3d-compiler --no-opengl-sw
 
      - name: Archive release folder
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          path: ${{github.workspace}}/build/wwhd_rando_windows
          filename: wwhd_rando_${{ steps.get-version.outputs.RANDO_VERSION }}_windows.zip

      - name: Save Artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{github.workspace}}\wwhd_rando_${{ steps.get-version.outputs.RANDO_VERSION }}_windows.zip
          name: wwhd_rando_${{ steps.get-version.outputs.RANDO_VERSION }}_windows
