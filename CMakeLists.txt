cmake_minimum_required(VERSION 3.7)
project(wwhd_rando CXX)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D ENABLE_DEBUG=1 -DJSON_NOEXCEPTION=1 -DJSON_USE_IMPLICIT_CONVERSIONS=0 -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -O3") # -Weverything isn't great but other flags don't want to work
add_compile_definitions(RANDOMIZER_VERSION="01.00.00a")

if(ENABLE_DEBUG)
  message("Debugging is ON")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DENABLE_DEBUG")
endif()

# Some path related stuff for logging
string(LENGTH "${CMAKE_SOURCE_DIR}/" SOURCE_PATH_SIZE)
add_definitions("-DSOURCE_PATH_SIZE=${SOURCE_PATH_SIZE}")

if(DEFINED DEVKITPRO)
  include("${DEVKITPRO}/wut/share/wut.cmake" REQUIRED)
  add_definitions(-DDEVKITPRO)
else()
  find_package(Threads REQUIRED)
endif()

# Some path related stuff for logging
string(LENGTH "${CMAKE_SOURCE_DIR}/" SOURCE_PATH_SIZE)
add_definitions("-DSOURCE_PATH_SIZE=${SOURCE_PATH_SIZE}")

if(WIN32)
  # in windows case, we bundle a zlib static library
  set(ZLIB_LIBRARY "${CMAKE_SOURCE_DIR}/libs/zlib_win/zlibstat.lib")
  set(ZLIB_INCLUDE_DIR "libs/zlib_win")
  add_library(zlib STATIC IMPORTED)
  set_target_properties(zlib PROPERTIES IMPORTED_LOCATION ${ZLIB_LIBRARY})
else()
  include(FindPkgConfig)
  pkg_check_modules(ZLIB zlib REQUIRED)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++20")
endif()

if(CMAKE_USE_PTHREADS_INIT)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -Wall -Werror")
  set(THREADS_PREFER_PTHREAD_FLAG ON)
endif()

add_executable(wwhd_rando randomizer.cpp)
target_sources(wwhd_rando PRIVATE "tweaks.cpp" "options.cpp")
add_subdirectory("libs")
add_subdirectory("seedgen")
add_subdirectory("server/utility")
add_subdirectory("server/command")
add_subdirectory("server/filetypes")
add_subdirectory("logic")

if(WIN32)
  target_link_libraries(wwhd_rando zlib)
  target_include_directories(wwhd_rando PRIVATE ${ZLIB_INCLUDE_DIR})
else()
  target_link_libraries(wwhd_rando ${ZLIB_LDFLAGS})
  target_compile_options(wwhd_rando PRIVATE ${ZLIB_CFLAGS})
endif()
if(DEFINED DEVKITPRO)
  target_link_libraries(wwhd_rando iosuhax)
endif()
if(CMAKE_USE_PTHREADS_INIT)
  target_link_libraries(wwhd_rando Threads::Threads)
endif()

if(DEFINED DEVKITPRO)
  wut_create_rpx(wwhd_rando)
endif()

file(COPY "asm/custom_symbols.json" DESTINATION "${CMAKE_BINARY_DIR}/asm")
file(COPY "asm/patch_diffs" DESTINATION "${CMAKE_BINARY_DIR}/asm")
file(COPY assets DESTINATION ${CMAKE_BINARY_DIR})
file(COPY "logic/data" DESTINATION "${CMAKE_BINARY_DIR}/logic")
